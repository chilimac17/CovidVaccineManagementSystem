/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Covid19;

/*
import Covid19.Administrator;
import static Covid19.AppointmentForm.jATable;
import static Covid19.ClinicianForm.jCTable;
import static Covid19.RecipientForm.infoBox;
import static Covid19.RecipientForm.jRTable;
*/
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.io.BufferedReader;
/*
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
*/
import java.io.FileReader;
// import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
*/
import javax.swing.JTable;

/**
 *
 * @author Admin
 */

public class AdminstratorForm extends javax.swing.JFrame {

	public AdminstratorForm() {
		if (jTableA1 != null) {
			DefaultTableModel modelR = (DefaultTableModel) jTableA1.getModel();
			adminList.RList.displayTable(modelR);
		}
		if (jTableA2 != null) {
			DefaultTableModel modelC = (DefaultTableModel) jTableA2.getModel();
			adminList.CList.displayTable(modelC);
		}
		if (jTableA3 != null) {
			DefaultTableModel modelA = (DefaultTableModel) jTableA3.getModel();
			adminList.AppList.displayTable(modelA);
		}
		initComponents();
	}

	public AdminstratorForm(DefaultTableModel V, DefaultTableModel C, DefaultTableModel A) {

		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	//@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jV = new javax.swing.JButton();
		jC = new javax.swing.JButton();
		jApp = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTableA1 = new javax.swing.JTable();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTableA2 = new javax.swing.JTable();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTableA3 = new javax.swing.JTable();
		jSave = new javax.swing.JButton();
		jExit = new javax.swing.JButton();
		jLoad = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowActivated(java.awt.event.WindowEvent evt) {
				formWindowActivated(evt);
			}

			public void windowOpened(java.awt.event.WindowEvent evt) {
				formWindowOpened(evt);
			}
		});

		jLabel1.setFont(new java.awt.Font("Tahoma", 3, 48)); // NOI18N
		jLabel1.setText("Administrator");

		jV.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
		jV.setText("Vaccine Recipient");
		jV.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jVActionPerformed(evt);
			}
		});

		jC.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
		jC.setText("Clinician");
		jC.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jCActionPerformed(evt);
			}
		});

		jApp.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
		jApp.setText("Appointment");
		jApp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jAppActionPerformed(evt);
			}
		});

		jTableA1.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null, null, null, null, null, null, null, null, null, null } },
				new String[] { "Recipient ID", "Full Name", "DateOfBirth", "Sex", "Address", "Question 1", "Question 2",
						"Question 3", "Question 4", "Question 5", "Question 6", "Vaccine certificate",
						"Number of Dose" }));
		jTableA1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTableA1MouseClicked(evt);
			}
		});
		jScrollPane2.setViewportView(jTableA1);

		jTableA2.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null, null, null } }, new String[] { "Clinician ID",
						"Clinician Name", "Pfizer-BioNTech", "Moderna", "Johnson & Johnson's Janssen", "Total" }));
		jScrollPane1.setViewportView(jTableA2);

		jTableA3.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null, null, null } },
				new String[] { "Appointment ID", "Receipient ID", "Clinician ID", "Vaccine Name", "Dose", "Date" }));
		jScrollPane3.setViewportView(jTableA3);

		jSave.setText("SAVE");
		jSave.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jSaveActionPerformed(evt);
			}
		});

		jExit.setText("EXIT");
		jExit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jExitActionPerformed(evt);
			}
		});

		jLoad.setText("LOAD");
		jLoad.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jLoadActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		getContentPane().setBackground(Color.CYAN);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				layout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 367,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(245, 245, 245))
				.addGroup(layout.createSequentialGroup().addGap(35, 35, 35)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane2)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 770,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jApp, javax.swing.GroupLayout.PREFERRED_SIZE, 193,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jV)
												.addComponent(jC, javax.swing.GroupLayout.PREFERRED_SIZE, 193,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 770,
														javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(0, 199, Short.MAX_VALUE)))
						.addContainerGap())
				.addGroup(layout.createSequentialGroup().addGap(220, 220, 220)
						.addComponent(jLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 116,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jSave, javax.swing.GroupLayout.PREFERRED_SIZE, 116,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(jExit, javax.swing.GroupLayout.PREFERRED_SIZE, 116,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(74, 74, 74).addComponent(jLabel1).addGap(18, 18, 18)
						.addComponent(jV).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jC)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jApp)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jSave).addComponent(jLoad).addComponent(jExit))
						.addContainerGap(151, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jVActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jVActionPerformed
		this.toBack();
		RecipientForm recipientForm;
		recipientForm = new RecipientForm();
		recipientForm.setVisible(true);
		this.setVisible(false);
		recipientForm.toFront();
		recipientForm.setSize(1092, 900);
		recipientForm.setLocation(100, 100);
	}// GEN-LAST:event_jVActionPerformed

	private void jAppActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jAppActionPerformed
		this.toBack();
		DefaultTableModel modelR;
		DefaultTableModel modelC;
		DefaultTableModel modelA;
		this.setVisible(false);
		if (jTableA1 == null) {
			modelR = null;
		} else
			modelR = (DefaultTableModel) jTableA1.getModel();
		if (jTableA2 == null) {
			modelC = null;
		} else
			modelC = (DefaultTableModel) jTableA2.getModel();
		if (jTableA3 == null) {
			modelA = null;
		} else
			modelA = (DefaultTableModel) jTableA3.getModel();
		AppointmentForm appointmentForm = new AppointmentForm();

		appointmentForm.toFront();
		appointmentForm.setSize(1092, 800);
		appointmentForm.setLocation(100, 100);
		appointmentForm.setVisible(true);
		appointmentForm.setState(java.awt.Frame.NORMAL);

	}// GEN-LAST:event_jAppActionPerformed

	private void jCActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCActionPerformed

		this.toBack();
		ClinicianForm clinicianForm = new ClinicianForm();
		clinicianForm.setVisible(true);
		this.setVisible(false);
		clinicianForm.toFront();
		clinicianForm.setSize(1092, 800);
		clinicianForm.setLocation(100, 100);
	}// GEN-LAST:event_jCActionPerformed

	private void jTableA1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTableA1MouseClicked

	}// GEN-LAST:event_jTableA1MouseClicked

	private void formWindowActivated(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowActivated

	}// GEN-LAST:event_formWindowActivated

	private void jExitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jExitActionPerformed
		this.dispose();
	}// GEN-LAST:event_jExitActionPerformed

	private void jSaveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jSaveActionPerformed
		adminList.RList.writeFile();
		adminList.CList.writeFile();
		adminList.AppList.writeFile();
		/*
		 * try { this.tableToFile(jRTable,jTableA2,jATable); } catch (IOException ex) {
		 * Logger.getLogger(AdminstratorForm.class.getName()).log(Level.SEVERE, null,
		 * ex); }
		 */
	}// GEN-LAST:event_jSaveActionPerformed

	private void jLoadActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jLoadActionPerformed
		adminList.RList = new RecipientList();
		adminList.CList = new ClinicianList();
		adminList.AppList = new AppointmentList();
		try {
			AdminstratorForm.fileToTable(jTableA1, jTableA2, jTableA3);
		} catch (IOException ex) {
			Logger.getLogger(AdminstratorForm.class.getName()).log(Level.SEVERE, null, ex);
		}
		this.setVisible(false);
		new AdminstratorForm().setVisible(true);
		new AdminstratorForm().setState(java.awt.Frame.NORMAL);
		new AdminstratorForm().setSize(1092, 800);
		new AdminstratorForm().setLocation(100, 100);
	}// GEN-LAST:event_jLoadActionPerformed

	private void formWindowOpened(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowOpened

	}// GEN-LAST:event_formWindowOpened

	/**
	 * @param args the command line arguments
	 */
	public static Administrator adminList = new Administrator();

	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new AdminstratorForm().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jApp;
	private javax.swing.JButton jC;
	private javax.swing.JButton jExit;
	private javax.swing.JLabel jLabel1;
	public static javax.swing.JButton jLoad;
	private javax.swing.JButton jSave;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	public static javax.swing.JTable jTableA1;
	public static javax.swing.JTable jTableA2;
	public static javax.swing.JTable jTableA3;
	private javax.swing.JButton jV;
	// End of variables declaration//GEN-END:variables

	public static void fileToTable(JTable table1, JTable table2, JTable table3) throws IOException {

		DefaultTableModel modelR = (DefaultTableModel) table1.getModel();
		FileReader fr = new FileReader("Recipient.txt");
		BufferedReader br = new BufferedReader(fr);

		while (modelR.getRowCount() > 0) {
			modelR.removeRow(0);
		}
		String line;
		while ((line = br.readLine()) != null) {
			String[] data = line.split(",");
			modelR.addRow(data);

			adminList.RList.addRecipient(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
					data[8], data[9], data[10], data[11], data[12]);
			// jRTable.setModel(modelR);
		}
		br.close();
		fr.close();

		DefaultTableModel modelC = (DefaultTableModel) table2.getModel();
		FileReader fc = new FileReader("Clinician.txt");
		BufferedReader bc = new BufferedReader(fc);

		while (modelC.getRowCount() > 0) {
			modelC.removeRow(0);
		}
		while ((line = bc.readLine()) != null) {
			String[] data = line.split(",");
			modelC.addRow(data);
			adminList.CList.addClinician(data[0], data[1], data[2], data[3], data[4], data[5]);
		}

		bc.close();
		fc.close();
		DefaultTableModel modelA = (DefaultTableModel) table3.getModel();
		FileReader fa = new FileReader("Appointment.txt");
		BufferedReader ba = new BufferedReader(fa);
		while (modelA.getRowCount() > 0) {
			modelA.removeRow(0);
		}
		while ((line = ba.readLine()) != null) {
			String[] data = line.split(",");
			modelA.addRow(data);
			adminList.AppList.addAppointment(data[0], data[1], data[2], data[3], data[4], data[5]);
		}
		ba.close();
		fa.close();
	}

}
